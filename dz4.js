/*jslint regexp: true, browser: true, devel: true, newcap: true, plusplus: true */

var todayDate = new Date(),
    places = ["Earth", "Mars", "Jupiter", "Yekaterinburg", "New York", "Saint-Petersburg", "Moscow", "London", "UrFU"],
    someParticipants = ["Paulita", "Jesus", "Igor", "Jeanette", "Reatha", "Reina", "Evelina", "Kimber", "Irwin", "Kellye", "Duane", "Charisse", "Rosalva", "Keitha", "Theola", "Irma", "Sharen", "Somer", "Napoleon", "Tien", "Suzie"],
// names generated by http://listofrandomnames.com/;
    randomRegularity = ["ежедневно", "еженедельно", "ежемесячно", "ежегодно"],
    j,
    newStart,
    newEnd,
    newNumbParticipants;

function isNumber(n) {
    'use strict';
    return !isNaN(parseFloat(n)) && isFinite(n);
}

//проверка даты
function isDate(input) {
    'use strict';
    var date, reg = /([1-9]|[12][0-9]|3[01]).(0[1-9]|1[012]).(19|20)\d\d/;
    if (input.match(reg)) {
        date = true;
    } else {
        date = false;
    }
    return date;
}

//проверка времени
function isTime(input) {
    'use strict';
    var time, reg = /^([0-9]|[1][0-9]|2[0-3]):([1-5][0-9]|[0-9])$/;
    if (input.match(reg)) {
        time = true;
    } else {
        time = false;
    }
    return time;
}

//check date
function checkDate(date) {
    'use strict';
    var dateDate = date.getDate() + '/' + (date.getMonth() + 1) + '/' + date.getFullYear(),
        dateTime = date.getUTCHours() + ':' + date.getUTCMinutes();
    if (!isDate(dateDate)) {
        return 1;
    }
    if (!isTime(dateTime)) {
        return 2;
    }
}

//checkRate
function checkRate(rate) {
    'use strict';
    if ((!isNumber(rate) && rate !== "") || (rate > 5 || rate < 1)) {
        return false;
    }
}

//check particpants
function checkParticipants(numbParticipants, participants) {
    'use strict';
    var participantsNames = participants.split(',');
    if (participantsNames.length !== numbParticipants) {
        return false;
    }
}

function inherits(Constructor, SuperConstructor) {
    "use strict";
    var F = function () {}; // Временный, чистый конструктор
    // Сохраняем ссылку
    F.prototype = SuperConstructor.prototype;
    // Применяем __proto__ = prototype
    Constructor.prototype = new F();
}

var Model = function (obj) {
    'use strict';
    var name;
    for (name in obj) {
        if (obj.hasOwnProperty(name)) {
            this[name] = obj[name];
        }
    }
};

Model.prototype.set = function (attributes) {
    'use strict';
    var name;
    for (name in attributes) {
        if (attributes.hasOwnProperty(name)) {
            this[name] = attributes[name];
        }
    }
};

Model.prototype.get = function (attribute) {
    'use strict';
    if (this.hasOwnProperty(attribute)) {
        return this[attribute];
    }
};

Model.prototype.validate = function (attributes) {
    'use strict';
    throw new Error('this is Abstract method');
};

var Event = function (data) {
    'use strict';
    Model.apply(this, arguments);
};
inherits(Event, Model);

/**
 * @param {Object} attributes
 */
Event.prototype.validate = function (attributes) {
    'use strict';
    if (attributes.end < attributes.start) {
        return "can't end before it starts";
    }
    if (!checkRate(attributes.rating)) {
        return "rating must be from 1 to 5";
    }
    if (checkDate(attributes.start) === 1) {
        return "incorrect start date";
    }
    if (checkDate(attributes.start) === 2) {
        return "incorrect start time";
    }
    if (checkDate(attributes.end) === 1) {
        return "incorrect end date";
    }
    if (checkDate(attributes.end) === 2) {
        return "incorrect end time";
    }
    if (!isNumber(attributes.numbParticipants)) {
        return "incorrect number of Participants";
    }
    if (!checkParticipants(attributes.participants)) {
        return "incorresct list of participants";
    }
};

var Collection = function (items) {
    'use strict';
    var name;
    this.items = [];
    for (name in items) {
        if (items.hasOwnProperty(name)) {
            this.items.push(items[name]);
        }
    }
};

/**
 * @return {Collection}
 */
Collection.prototype.add = function (model) {
    'use strict';
    this.items.push(model);
};

/**
 * @param {Function} selector
 *
 * @example
 *    new Collection().filter(function (item) {
 *        return item.get('attendee').indexOf("me") !== -1;
 *    });
 * @return {Collection}
 */
Collection.prototype.filter = function (selector) {
    'use strict';
    return new Collection(this.items.filter(selector));
};

/**
 * @return {Collection}
 */
Collection.prototype.sortBy = function (fieldName) {
    'use strict';
    if (fieldName === "date") {
        return new Collection(this.items.sort(function (Event1, Event2) {return (Event1.start - Event2.start); }));
    }
    if (fieldName === "rating") {
        return new Collection(this.items.sort(function (Event1, Event2) {return (Event1.rate - Event2.rate); }));
    }
};

Collection.prototype.sortWith = function (fieldName, partWith, partName) {
    'use strict';
    var tempCollection;
    if (partWith === "with") {
        tempCollection = new Collection(this.items.filter(function (Event) {return (Event.participants.indexOf(partName) !== -1); }));
    }
    if (partWith === "without") {
        tempCollection = new Collection(this.items.filter(function (Event) {return (Event.participants.indexOf(partName) === -1); }));
    }
    return tempCollection.sortBy(fieldName);
};

//получаем произвольное целое число в интервале
function randomFromInterval(from, to) {
    'use strict';
    return Math.floor(Math.random() * (to - from + 1)) + from;
}

//добавление n дней к текущей
function addDays(n) {
    'use strict';
    return new Date(todayDate.getTime() + 24 * 60 * 60 * 1000 * n);
}

//добавление столько дней, сколько осталось до конца недели
function week() {
    'use strict';
    return new Date(addDays(7 - todayDate.getDay()).getTime());
}

var Events = function (items) {
    'use strict';
    Collection.apply(this, arguments);
};
inherits(Events, Collection);

/**
 * @return {Events}
 */
Events.prototype.findOnlyMyEvents = function () {
    'use strict';
    return new Events((this.sortWith("date", "with", "Igor")).items);
};
/**
 * @return {Events}
 */
Events.prototype.findFutureEvents = function () {
    'use strict';
    return new Events((this.filter(function (Event) {return (Event.start > todayDate); })).items);
};
/**
 * @return {Events}
 */
Events.prototype.findPastEvents = function () {
    'use strict';
    return new Events((this.filter(function (Event) {return (Event.end < todayDate); })).items);
};
/**
 * @return {Events}
 */
Events.prototype.sortByName = function () {
    'use strict';
    return new Events(this.items.sort(function (Event1, Event2) {return (Event1.participants > Event2.participants); }));
};

/**
 * @return {Events}
 */
Events.prototype.sortByDate = function () {
    'use strict';
    return new Events(this.sortBy("date").items);
};
/**
 * @return {Events}
 */
Events.prototype.sortByRating = function () {
    'use strict';
    return new Events((this.sortBy("rating")).items);
};
/**
 * @return {Events}
 */
Events.prototype.sortByNumberOfParticipants = function () {
    'use strict';
    return new Events(this.sort(function (Event) {return (Event.numbParticipants); })).items;
};

/**
 * @return {Events}
 */
Events.prototype.consoleOut = function () {
    'use strict';
    this.items.forEach(function (Event) {
        console.log(Event.name + ":  Start of event: " + Event.start + ", Rating: " + Event.rate + ", Participants: " + Event.participants);
    });
};
//выбираем случайным образом участников из случайного набора участников
function chooseParticipant(n) {
    'use strict';
    var i, a, added, s = "";
    for (i = 0; i < n; i++) {
        added = false;
        while (!added) {
            a = someParticipants[randomFromInterval(0, 19)];
            if (s.indexOf(a) === -1) {
                if (i !== n - 1) {
                    s = s + a + ",";
                } else {
                    s = s + a;
                }
                added = true;
            } else {
                added = false;
            }
        }
    }
    return s;
}

//создаем случайные комментарии
function randomComment() {
    'use strict';
    var chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz",
        string_length = randomFromInterval(1, 30),
        randomcomment = '',
        rnum,
        i;
    for (i = 0; i < string_length; i++) {
        rnum = Math.floor(Math.random() * chars.length);
        randomcomment += chars.substring(rnum, rnum + 1);
    }
    return randomcomment;
}

var eventColl = new Events();
//заполнение коллекции событий 21м случайным событием
for (j = 0; j < 3; j++) {
    newStart = new Date(addDays(randomFromInterval(-30, 30)).getTime());
    newEnd = new Date(newStart.getTime() + randomFromInterval(1, 24 * 60 * 60 * 1000));
    newNumbParticipants = randomFromInterval(2, 21);
    eventColl.add(new Event({
        start: newStart,
        end: newEnd,
        rate: randomFromInterval(1, 5),
        place: places[randomFromInterval(0, 8)],
        numbParticipants: newNumbParticipants,
        participants: chooseParticipant(newNumbParticipants),
        regularity: randomRegularity[randomFromInterval(0, 3)],
        comment: randomComment(),
        name: "Event" + j
    }));
}

//примеры сортировок и выборок
console.log("События отсортированные по дате:");
(eventColl.sortByDate()).consoleOut();
console.log("События отсортированные по имени:");
(eventColl.sortByName()).consoleOut();
console.log("События только с моим участием:");
(eventColl.findOnlyMyEvents()).consoleOut();
console.log("События в будущем:");
(eventColl.findFutureEvents()).consoleOut();
console.log("События в прошлом:");
(eventColl.findPastEvents()).consoleOut();
console.log("События отсортированные по рейтингу:");
(eventColl.sortByRating()).consoleOut();